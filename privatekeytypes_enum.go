// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package certutils

import (
	"errors"
	"fmt"
)

const (
	// PrivateKeyTypeRsa2048 is a PrivateKeyType of type rsa2048.
	PrivateKeyTypeRsa2048 PrivateKeyType = "rsa2048"
	// PrivateKeyTypeRsa3076 is a PrivateKeyType of type rsa3076.
	PrivateKeyTypeRsa3076 PrivateKeyType = "rsa3076"
	// PrivateKeyTypeRsa4096 is a PrivateKeyType of type rsa4096.
	PrivateKeyTypeRsa4096 PrivateKeyType = "rsa4096"
	// PrivateKeyTypeEcp256 is a PrivateKeyType of type ecp256.
	PrivateKeyTypeEcp256 PrivateKeyType = "ecp256"
	// PrivateKeyTypeEcp384 is a PrivateKeyType of type ecp384.
	PrivateKeyTypeEcp384 PrivateKeyType = "ecp384"
	// PrivateKeyTypeEcp521 is a PrivateKeyType of type ecp521.
	PrivateKeyTypeEcp521 PrivateKeyType = "ecp521"
)

var ErrInvalidPrivateKeyType = errors.New("not a valid PrivateKeyType")

// String implements the Stringer interface.
func (x PrivateKeyType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PrivateKeyType) IsValid() bool {
	_, err := ParsePrivateKeyType(string(x))
	return err == nil
}

var _PrivateKeyTypeValue = map[string]PrivateKeyType{
	"rsa2048": PrivateKeyTypeRsa2048,
	"rsa3076": PrivateKeyTypeRsa3076,
	"rsa4096": PrivateKeyTypeRsa4096,
	"ecp256":  PrivateKeyTypeEcp256,
	"ecp384":  PrivateKeyTypeEcp384,
	"ecp521":  PrivateKeyTypeEcp521,
}

// ParsePrivateKeyType attempts to convert a string to a PrivateKeyType.
func ParsePrivateKeyType(name string) (PrivateKeyType, error) {
	if x, ok := _PrivateKeyTypeValue[name]; ok {
		return x, nil
	}
	return PrivateKeyType(""), fmt.Errorf("%s is %w", name, ErrInvalidPrivateKeyType)
}
